xlab = expression(sigma[p]), ylab = expression(mu[p]))
# Marcando os 16 ativos no gráifico
points(sig.vec, mu.vec, pch=16, cex = 0.8, col='black')
text(sig.vec, mu.vec, dados_codigos, pos = 4, cex = 0.65, col = 'black')
# (vii) Determinando GMVP pela formula do slide
sigma.inv = solve(sigma.mat)
gmvp.formula = rowSums(sigma.inv)/sum(sigma.inv)
# (viii) Calculando GMVP pelo portfolio.r
gmvp.zivot = globalMin.portfolio(er = mu.vec ,cov.mat = sigma.mat, shorts = TRUE)
# (x Opcional) Calcular parametros e acrescentar no grafico
portfolio_fronteira <- function(mu_alvo, mu_vec, sigma_mat) {
# Criando vetores de zeros e uns
DIM = nrow(sigma_mat)
zero_vec = rep(0, DIM)
one_vec = rep(1, DIM)
# Construindo a matriz A
A = matrix(0, nrow = DIM+2, ncol = DIM+2)
A[1:DIM, 1:DIM] = 2*sigma_mat
A[DIM+1, 1:DIM] = mu.vec
A[DIM+2, 1:DIM] = one_vec
A[1:DIM, DIM+1] = mu.vec
A[1:DIM, DIM+2] = one_vec
# Construindo o vetor b
b = c(zero_vec, mu_alvo, 1)
# Calculando a inversa da matriz A
A_inv = solve(A)
# Calculando o vetor z
z = A_inv %*% b
# Extraindo o vetor x (removendo as duas ?ltimas linhas)
x_vec = head(z, -2)
# Calculando as caracter?sticas do portf?lio
mu_p = t(x_vec) %*% mu_vec
sig_p = sqrt(t(x_vec) %*% sigma_mat %*% x_vec)
# Retornando as caracter?sticas do portf?lio
return(list(x_vec = x_vec, mu_p = mu_p, sig_p = sig_p))
}
alfa.vec = seq(from = 4, to = -5.5, by = -0.1)
n.pontos = length(alfa.vec)
mu.0 = max(mu.vec)
X = portfolio_fronteira(mu.0, mu.vec, sigma.mat)
mu.p.fron = NULL
sig.p.fron = NULL
for (i in 1:n.pontos) {
alfa = alfa.vec[i]
aux = alfa*gmvp.formula + (1 - alfa)*X$x_vec
mu.p.fron[i] = t(aux) %*% mu.vec
sig.p.fron[i] = sqrt(t(aux) %*% sigma.mat %*% aux)
}
points(sig.p.fron, mu.p.fron, pch = 16, cex = 0.9, col = 'lightgreen')
# (ix Opcional) Acrescentar GMVP ao grafico
# Coloquei após a bala de Markowitz por motivos visuais
sig.gmvp = gmvp.zivot$sd
mu.gmvp = gmvp.zivot$er
points(sig.gmvp, mu.gmvp, pch = 16, col = 'red', cex = 1)
text(sig.gmvp, mu.gmvp, 'GMVP', pos = 2, cex = 0.65, col = 'red')
# (xi) Calculando portfolio tangente pelos multiplicadores de Lagrange
one.vec = rep(1, 18)
rf <- 0
tangente.formula = sigma.inv %*% (mu.vec - rf * one.vec) / as.numeric(t(one.vec) %*% sigma.inv %*% (mu.vec - rf * one.vec))
# (xii) Calculando portfolio tangente pelo portfolio.r
rf <- 0
tangente.zivot = tangency.portfolio(er = mu.vec, cov.mat = sigma.mat, risk.free = rf)
# (xiii Opcional) Colocar portfolio tangente no grafico
# (xiv Opcional) Coloca reta de investimentos eficientes
# (xv e xvi) Determinando GMVP onde vendas a descoberto não são permitidas
n <- length(mu.vec) # número de ativos
Dmat <- 2 * sigma.mat # Dmat na função solve.QP() é 2 vezes a matriz de covariância
dvec <- rep(0, n) # dvec é um vetor de zeros
Amat <- cbind(1, diag(n)) # matriz de restrições
bvec <- c(1, rep(0, n)) # vetor de restrições
sol <- solve.QP(Dmat, dvec, Amat, bvec, meq = 1) # resolvendo o problema de otimização quadrática
(weights <- sol$solution) # pesos do portfólio GMVP
# (xix) Determinando o portfólio tangente sem vendas a descoberto
rf <- 0 # retorno do ativo livre de risco
(tg.s.short <- tangency.portfolio(er = mu.vec, cov.mat = sigma.mat, risk.free = rf, shorts = FALSE))
# Integrantes do Grupo
# Christopher Henry Pinheiro Gonzaga DRE: 122047223
# Victor Wohlers Cardoso DRE: 119157174
# Carregar bibliotecas
library(readxl)
library(quadprog)
library(rportfolios)
source("portfolio.r")
getwd()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# (i) Retirando informacoes da planilha
dados <- read_excel("dados.xlsx", sheet = "close.df")
dados_numericos <- dados[sapply(dados, is.numeric)]
close.df <- data.frame(dados_numericos)
dados_codigos <- colnames(close.df)
# (ii, iii, iv, v) Calculando retorno cc, esperanca e volatilidade media e covariancias
(ret.df = apply(log(close.df), 2, diff))
(mu.vec = apply(ret.df, 2, mean))
(sig.vec = apply(ret.df, 2, sd))
(sigma.mat = cov(ret.df))
# (vi Opcional) Criando grafico risco x retorno de carteiras aleatórias
POPU = 1e4
x.mat = matrix(0, nrow = POPU, ncol = length(dados_codigos))
for (i in 1:POPU) {
# gera um número entre 1 e 2, correspondente ao somatório das posições longas
x.long = runif(1, 1, 2)
x.mat[i, ] = random.longshort(
n = length(dados_codigos),
x.t.long = x.long,
x.t.short = x.long - 1)
}
mu.p = x.mat %*% mu.vec
sig.p = rep(0,POPU)
# Loop for para calcular a volatilidade para cada linha da matriz
for (i in 1:POPU) {
# Calcula a volatilidade para a i-?sima linha
sig.p[i] <- sqrt(t(x.mat[i,]) %*% sigma.mat %*% x.mat[i,])
}
plot(sig.p, mu.p, pch = 16, col = "lightgrey",
xlim = c(0, max(sig.p)), ylim = c(-0.0035, 0.008),
xlab = expression(sigma[p]), ylab = expression(mu[p]))
# Marcando os 16 ativos no gráifico
points(sig.vec, mu.vec, pch=16, cex = 0.8, col='black')
text(sig.vec, mu.vec, dados_codigos, pos = 4, cex = 0.65, col = 'black')
# (vii) Determinando GMVP pela formula do slide
sigma.inv = solve(sigma.mat)
gmvp.formula = rowSums(sigma.inv)/sum(sigma.inv)
# (viii) Calculando GMVP pelo portfolio.r
gmvp.zivot = globalMin.portfolio(er = mu.vec ,cov.mat = sigma.mat, shorts = TRUE)
# (x Opcional) Calcular parametros e acrescentar no grafico
portfolio_fronteira <- function(mu_alvo, mu_vec, sigma_mat) {
# Criando vetores de zeros e uns
DIM = nrow(sigma_mat)
zero_vec = rep(0, DIM)
one_vec = rep(1, DIM)
# Construindo a matriz A
A = matrix(0, nrow = DIM+2, ncol = DIM+2)
A[1:DIM, 1:DIM] = 2*sigma_mat
A[DIM+1, 1:DIM] = mu.vec
A[DIM+2, 1:DIM] = one_vec
A[1:DIM, DIM+1] = mu.vec
A[1:DIM, DIM+2] = one_vec
# Construindo o vetor b
b = c(zero_vec, mu_alvo, 1)
# Calculando a inversa da matriz A
A_inv = solve(A)
# Calculando o vetor z
z = A_inv %*% b
# Extraindo o vetor x (removendo as duas ?ltimas linhas)
x_vec = head(z, -2)
# Calculando as caracter?sticas do portf?lio
mu_p = t(x_vec) %*% mu_vec
sig_p = sqrt(t(x_vec) %*% sigma_mat %*% x_vec)
# Retornando as caracter?sticas do portf?lio
return(list(x_vec = x_vec, mu_p = mu_p, sig_p = sig_p))
}
alfa.vec = seq(from = 4, to = -5.5, by = -0.1)
n.pontos = length(alfa.vec)
mu.0 = max(mu.vec)
X = portfolio_fronteira(mu.0, mu.vec, sigma.mat)
mu.p.fron = NULL
sig.p.fron = NULL
for (i in 1:n.pontos) {
alfa = alfa.vec[i]
aux = alfa*gmvp.formula + (1 - alfa)*X$x_vec
mu.p.fron[i] = t(aux) %*% mu.vec
sig.p.fron[i] = sqrt(t(aux) %*% sigma.mat %*% aux)
}
points(sig.p.fron, mu.p.fron, pch = 16, cex = 0.9, col = 'lightgreen')
# (ix Opcional) Acrescentar GMVP ao grafico
# Coloquei após a bala de Markowitz por motivos visuais
sig.gmvp = gmvp.zivot$sd
mu.gmvp = gmvp.zivot$er
points(sig.gmvp, mu.gmvp, pch = 16, col = 'red', cex = 1.2)
text(sig.gmvp, mu.gmvp, 'GMVP', pos = 2, cex = 0.75, col = 'red')
# (xi) Calculando portfolio tangente pelos multiplicadores de Lagrange
one.vec = rep(1, 18)
rf <- 0
tangente.formula = sigma.inv %*% (mu.vec - rf * one.vec) / as.numeric(t(one.vec) %*% sigma.inv %*% (mu.vec - rf * one.vec))
# (xii) Calculando portfolio tangente pelo portfolio.r
rf <- 0
tangente.zivot = tangency.portfolio(er = mu.vec, cov.mat = sigma.mat, risk.free = rf)
# (xiii Opcional) Colocar portfolio tangente no grafico
# (xiv Opcional) Coloca reta de investimentos eficientes
# (xv e xvi) Determinando GMVP onde vendas a descoberto não são permitidas
n <- length(mu.vec) # número de ativos
Dmat <- 2 * sigma.mat # Dmat na função solve.QP() é 2 vezes a matriz de covariância
dvec <- rep(0, n) # dvec é um vetor de zeros
Amat <- cbind(1, diag(n)) # matriz de restrições
bvec <- c(1, rep(0, n)) # vetor de restrições
sol <- solve.QP(Dmat, dvec, Amat, bvec, meq = 1) # resolvendo o problema de otimização quadrática
(weights <- sol$solution) # pesos do portfólio GMVP
# (xix) Determinando o portfólio tangente sem vendas a descoberto
rf <- 0 # retorno do ativo livre de risco
(tg.s.short <- tangency.portfolio(er = mu.vec, cov.mat = sigma.mat, risk.free = rf, shorts = FALSE))
# Carregando as bibliotecas necess?rias
library(zoo)
library(tseries)
library(PerformanceAnalytics)
library(tidyverse)
library(rportfolios)
# Definindo o per?odo de an?lise
START = "2013-08-01"
END = "2018-09-01"
# Escolhendo os c?digos das a??es
codigos = c("ABEV3", "BBAS3", "CIEL3")
# Criando uma estrutura de dados zoo para armazenar os pre?os de fechamento
close.zoo = zoo()
# modificando o ?ndice para armazenar datas no formato m?s/ano
index(close.zoo) = as.yearmon(index(close.zoo))
# Obtendo os pre?os de fechamento das a??es
for(codigo in codigos) {
aux = get.hist.quote(
instrument=paste(codigo, 'SA', sep = '.'),
start=START, end=END,
quote="AdjClose", provider="yahoo", compression="m",
retclass="zoo", quiet=TRUE)
index(aux) = as.yearmon(index(aux))
close.zoo = merge(close.zoo, aux)
}
# Nomeando as colunas com os c?digos das a??es
colnames(close.zoo) = codigos
# Transformando pre?os de fechamento em retornos mensais
close.df = data.frame(close.zoo)
ret.df = apply(log(close.df), 2, diff)
head(ret.df)
# Calculando estat?sticas amostrais
# Retornos m?dios
(mu.vec = apply(ret.df, 2, mean))
# Volatilidades
(sig.vec = apply(ret.df, 2, sd))
# Calculando a matriz de covari?ncias
(sigma.mat = cov(ret.df))
# GERANDO PORTF?LIOS ALEAT?RIOS
NPORT = 1e4
x.mat = matrix(0, nrow = NPORT, ncol = length(codigos))
colnames(x.mat) = codigos
head(x.mat)
# Gerando pesos aleat?rios para os ativos
for (i in 1:NPORT) {
# gera um n?mero entre 1 e 2, correspondente ao somat?rio das posi??es longas
x.long = runif(1, 1, 2)
x.mat[i, ] = random.longshort(
n = length(codigos),
x.t.long = x.long,
x.t.short = x.long - 1)
}
# Calculando retorno e volatilidade para cada carteira aleat?ria
mu.p = x.mat %*% mu.vec
head(mu.p)
# Inicializa um vetor para armazenar as volatilidades
sig.p <- rep(0, NPORT)
head(sig.p)
# Loop for para calcular a volatilidade para cada linha da matriz
for (i in 1:NPORT) {
# Calcula a volatilidade para a i-?sima linha
sig.p[i] <- sqrt(t(x.mat[i,]) %*% sigma.mat %*% x.mat[i,])
}
# Plotando os portf?lios aleat?rios
plot(sig.p, mu.p, pch = 16, col = 'black',
xlim = c(0, max(sig.p)),
xlab = expression(sigma[p]), ylab = expression(mu[p]))
# Marcando os ativos A, B e C no gr?fico
points(sig.vec, mu.vec, pch=16, cex = 1.5, col='red')
text(sig.vec, mu.vec, codigos, pos = 4, cex = 0.7, col = 'red')
# Determinando os pesos no portf?lio de vari?ncia m?nima
# Teoria de Portf?lios (slide 79)
sigma.inv = solve(sigma.mat)
m.vec = rowSums(sigma.inv)/sum(sigma.inv)
# Adicionando o ponto do portf?lio de vari?ncia m?nima no gr?fico
(mu.gmvp = t(m.vec) %*% mu.vec)
(sig.gmvp = sqrt(t(m.vec) %*% sigma.mat %*% m.vec))
points(sig.gmvp, mu.gmvp, pch = 16, col = 'magenta', cex = 2.0)
text(sig.gmvp, mu.gmvp, 'GMVP', pos = 2, cex = 0.7)
############################################################
# DEMO 1
############################################################
#' Definindo uma fun??o para os pesos e as caracter?sticas
#' de um portf?lio na fronteira, dado o retorno alvo
#' slide 5
portfolio_fronteira <- function(mu_alvo, mu_vec, sigma_mat) {
# Criando vetores de zeros e uns
DIM = nrow(sigma_mat)
zero_vec = rep(0, DIM)
one_vec = rep(1, DIM)
# Construindo a matriz A
A = matrix(0, nrow = DIM+2, ncol = DIM+2)
A[1:DIM, 1:DIM] = 2*sigma_mat
A[DIM+1, 1:DIM] = mu.vec
A[DIM+2, 1:DIM] = one_vec
A[1:DIM, DIM+1] = mu.vec
A[1:DIM, DIM+2] = one_vec
# Construindo o vetor b
b = c(zero_vec, mu_alvo, 1)
# Calculando a inversa da matriz A
A_inv = solve(A)
# Calculando o vetor z
z = A_inv %*% b
# Extraindo o vetor x (removendo as duas ?ltimas linhas)
x_vec = head(z, -2)
# Calculando as caracter?sticas do portf?lio
mu_p = t(x_vec) %*% mu_vec
sig_p = sqrt(t(x_vec) %*% sigma_mat %*% x_vec)
# Retornando as caracter?sticas do portf?lio
return(list(x_vec = x_vec, mu_p = mu_p, sig_p = sig_p))
}
# Calculando o portfolio na fronteira com o mesmo retorno de BBAS3
portfolio_BBAS3 = portfolio_fronteira(mu.vec['BBAS3'], mu.vec, sigma.mat)
# Calculando o portfolio na fronteira com o mesmo retorno de CIEL3
portfolio_CIEL3 = portfolio_fronteira(mu.vec['CIEL3'], mu.vec, sigma.mat)
# Obtendo covari?ncia e correla??o entre os portf?lios (vai ser ?til mais tarde)
sig_xy = t(portfolio_BBAS3$x_vec) %*% sigma.mat %*% portfolio_CIEL3$x_vec
rho_xy = sig_xy / portfolio_BBAS3$sig_p / portfolio_CIEL3$sig_p
# Plotando os pontos no gr?fico
points(
x = c(portfolio_BBAS3$sig_p, portfolio_CIEL3$sig_p),
y = c(portfolio_BBAS3$mu_p, portfolio_CIEL3$mu_p),
pch = 16, col = 'green', cex = 1.5
)
# Adicionando r?tulos aos pontos no gr?fico
text(
x = c(portfolio_BBAS3$sig_p, portfolio_CIEL3$sig_p),
y = c(portfolio_BBAS3$mu_p, portfolio_CIEL3$mu_p),
labels = c('BBAS3 Portfolio', 'CIEL3 Portfolio'), pos = 2, cex = 0.7
)
# Imprimindo a correla??o entre os portf?lios
cat("Correla??o entre BBAS3 Portfolio e CIEL3 Portfolio:", rho_xy, "\n")
############################################################
# DEMO 2
############################################################
# a fronteira da bala de Markowitz como combina??o convexa
# de dois outros portf?lios sobre a fronteira
p.x = portfolio_BBAS3
p.y = portfolio_CIEL3
# Definindo a propor??o alfa para a combina??o convexa
alfa = 0.5
# Calculando o vetor de peso para o portf?lio Z como combina??o convexa de X e Y
z.vec = alfa * p.x$x_vec + (1 - alfa) * p.y$x_vec
# Calculando o retorno esperado do portf?lio Z
mu.p.z = t(z.vec) %*% mu.vec
# Calculando a vari?ncia e o desvio padr?o do portf?lio Z
sig2.p.z = t(z.vec) %*% sigma.mat %*% z.vec
sig.p.z = sqrt(sig2.p.z)
# Tra?ando o gr?fico
plot(0, xlim = c(0, 0.2), ylim=c(0, 0.012), type = 'n',
xlab = expression(sigma[p]), ylab = expression(mu[p]))
# Marcando os ativos A, B e C no gr?fico
points(sig.vec, mu.vec, pch=16, cex = 1.5, col='red')
text(sig.vec, mu.vec, codigos, pos = 4, cex = 0.7)
# Marcando o portf?lio de vari?ncia m?nima (GMVP) no gr?fico
points(sig.gmvp, mu.gmvp, pch = 16, col = 'green', cex = 1.5)
text(sig.gmvp, mu.gmvp, 'GMVP', pos = 2, cex = 0.7)
# Marcando os portf?lios X e Y no gr?fico
points(x = c(p.x$sig_p, p.y$sig_p), y = c(p.x$mu_p, p.y$mu_p),
pch = 16, col = 'green', cex = 1.5)
text(x = c(p.x$sig_p, p.y$sig_p), y = c(p.x$mu_p, p.y$mu_p),
labels = c('X', 'Y'), pos = 2, cex = 0.7)
# Marcando o portf?lio Z no gr?fico
points(sig.p.z, mu.p.z, pch = 16, col = 'magenta', cex = 1.5)
text(sig.p.z, mu.p.z, 'E1', pos = 2, cex = 0.7)
############################################################
# DEMO 3
############################################################
# Definindo o objetivo de retorno esperado para o portf?lio Z
mu.alvo = 0.012
# Calculando a propor??o alfa para a combina??o convexa que atinge o retorno desejado
alfa = as.numeric((mu.alvo - p.y$mu_p)/(p.x$mu_p - p.y$mu_p))
# Calculando o vetor de peso para o portf?lio Z
z.vec = alfa * x.vec + (1 - alfa) * y.vec
############################################################
# DEMO 5
############################################################
# calcula o portf?lio tangente
# slide 23
(DIM = length(codigos))
# rendimento m?dio mensal do CDI no per?odo
rf = 0.8896/100
# inverso da matriz sigma
sigma.inv = solve(sigma.mat)
# vetor auxiliar
one.vec = rep(1, DIM)
# calculando o vetor tangente usando a f?rmula no slide 23
(t.vec = sigma.inv %*% (mu.vec - rf * one.vec) / as.numeric(
t(one.vec) %*% sigma.inv %*% (mu.vec - rf * one.vec))
)
# calcula a m?dia e o desvio padr?o do portf?lio tangente
(mu.p.t = t(t.vec) %*% mu.vec)
sig2.p.t = t(t.vec) %*% sigma.mat %*% t.vec
(sig.p.t = sqrt(sig2.p.t))
# tra?a o portf?lio tangente no gr?fico
points(sig.p.t, mu.p.t, pch = 16, col = 'magenta', cex=1.2)
text(sig.p.t, mu.p.t, 'tangente', pos = 4, cex = 0.7)
#' Tra?a a reta dos investimentos eficientes (
#' reta que passa pelo ativo livre de risco e pelo
#' portf?lio tangente)
abline(a = rf, b = (mu.p.t - rf)/sig.p.t, col = 'blue')
points(0, rf, pch = 16, col = 'magenta')
text(0, rf, 'rf', pos = 4, cex = 0.7)
#' como o coeficiente angular da reta ? negativo, inverte o coeficiente angular
#' Interpreta??o: Os investimentos eficientes envolvem encurtar o
#' portf?lio tangente para investir no ativo livre de risco
abline(a = rf, b = (rf - mu.p.t)/sig.p.t, lty=2)
# Integrantes do Grupo
# Christopher Henry Pinheiro Gonzaga DRE: 122047223
# Victor Wohlers Cardoso DRE: 119157174
# Carregar bibliotecas
library(readxl)
library(quadprog)
library(rportfolios)
source("portfolio.r")
getwd()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# (i) Retirando informacoes da planilha
dados <- read_excel("dados.xlsx", sheet = "close.df")
dados_numericos <- dados[sapply(dados, is.numeric)]
close.df <- data.frame(dados_numericos)
dados_codigos <- colnames(close.df)
# (ii, iii, iv, v) Calculando retorno cc, esperanca e volatilidade media e covariancias
(ret.df = apply(log(close.df), 2, diff))
(mu.vec = apply(ret.df, 2, mean))
(sig.vec = apply(ret.df, 2, sd))
(sigma.mat = cov(ret.df))
# (vi Opcional) Criando grafico risco x retorno de carteiras aleatórias
POPU = 1e4
x.mat = matrix(0, nrow = POPU, ncol = length(dados_codigos))
for (i in 1:POPU) {
# gera um número entre 1 e 2, correspondente ao somatório das posições longas
x.long = runif(1, 1, 2)
x.mat[i, ] = random.longshort(
n = length(dados_codigos),
x.t.long = x.long,
x.t.short = x.long - 1)
}
mu.p = x.mat %*% mu.vec
sig.p = rep(0,POPU)
# Loop for para calcular a volatilidade para cada linha da matriz
for (i in 1:POPU) {
# Calcula a volatilidade para a i-?sima linha
sig.p[i] <- sqrt(t(x.mat[i,]) %*% sigma.mat %*% x.mat[i,])
}
plot(sig.p, mu.p, pch = 16, col = "lightgrey",
xlim = c(0, max(sig.p)), ylim = c(-0.0035, 0.008),
xlab = expression(sigma[p]), ylab = expression(mu[p]))
# Marcando os 16 ativos no gráifico
points(sig.vec, mu.vec, pch=16, cex = 0.8, col='black')
text(sig.vec, mu.vec, dados_codigos, pos = 4, cex = 0.65, col = 'black')
# (vii) Determinando GMVP pela formula do slide
sigma.inv = solve(sigma.mat)
gmvp.formula = rowSums(sigma.inv)/sum(sigma.inv)
# (viii) Calculando GMVP pelo portfolio.r
gmvp.zivot = globalMin.portfolio(er = mu.vec ,cov.mat = sigma.mat, shorts = TRUE)
# (x Opcional) Calcular parametros e acrescentar no grafico
portfolio_fronteira <- function(mu_alvo, mu_vec, sigma_mat) {
# Criando vetores de zeros e uns
DIM = nrow(sigma_mat)
zero_vec = rep(0, DIM)
one_vec = rep(1, DIM)
# Construindo a matriz A
A = matrix(0, nrow = DIM+2, ncol = DIM+2)
A[1:DIM, 1:DIM] = 2*sigma_mat
A[DIM+1, 1:DIM] = mu.vec
A[DIM+2, 1:DIM] = one_vec
A[1:DIM, DIM+1] = mu.vec
A[1:DIM, DIM+2] = one_vec
# Construindo o vetor b
b = c(zero_vec, mu_alvo, 1)
# Calculando a inversa da matriz A
A_inv = solve(A)
# Calculando o vetor z
z = A_inv %*% b
# Extraindo o vetor x (removendo as duas ?ltimas linhas)
x_vec = head(z, -2)
# Calculando as caracter?sticas do portf?lio
mu_p = t(x_vec) %*% mu_vec
sig_p = sqrt(t(x_vec) %*% sigma_mat %*% x_vec)
# Retornando as caracter?sticas do portf?lio
return(list(x_vec = x_vec, mu_p = mu_p, sig_p = sig_p))
}
alfa.vec = seq(from = 4, to = -5.5, by = -0.1)
n.pontos = length(alfa.vec)
mu.0 = max(mu.vec)
X = portfolio_fronteira(mu.0, mu.vec, sigma.mat)
mu.p.fron = NULL
sig.p.fron = NULL
for (i in 1:n.pontos) {
alfa = alfa.vec[i]
aux = alfa*gmvp.formula + (1 - alfa)*X$x_vec
mu.p.fron[i] = t(aux) %*% mu.vec
sig.p.fron[i] = sqrt(t(aux) %*% sigma.mat %*% aux)
}
points(sig.p.fron, mu.p.fron, pch = 16, cex = 0.9, col = 'lightgreen')
# (ix Opcional) Acrescentar GMVP ao grafico
# Coloquei após a bala de Markowitz por motivos visuais
sig.gmvp = gmvp.zivot$sd
mu.gmvp = gmvp.zivot$er
points(sig.gmvp, mu.gmvp, pch = 16, col = 'red', cex = 1.2)
text(sig.gmvp, mu.gmvp, 'GMVP', pos = 2, cex = 0.75, col = 'red')
# (xi) Calculando portfolio tangente pelos multiplicadores de Lagrange
one.vec = rep(1, 18)
rf <- 0
tangente.formula = sigma.inv %*% (mu.vec - rf * one.vec) / as.numeric(t(one.vec) %*% sigma.inv %*% (mu.vec - rf * one.vec))
# (xii) Calculando portfolio tangente pelo portfolio.r
rf <- 0
tangente.zivot = tangency.portfolio(er = mu.vec, cov.mat = sigma.mat, risk.free = rf)
# (xiii Opcional) Colocar portfolio tangente no grafico
# (xiv Opcional) Coloca reta de investimentos eficientes
# (xv e xvi) Determinando GMVP onde vendas a descoberto não são permitidas
n <- length(mu.vec) # número de ativos
Dmat <- 2 * sigma.mat # Dmat na função solve.QP() é 2 vezes a matriz de covariância
dvec <- rep(0, n) # dvec é um vetor de zeros
Amat <- cbind(1, diag(n)) # matriz de restrições
bvec <- c(1, rep(0, n)) # vetor de restrições
sol <- solve.QP(Dmat, dvec, Amat, bvec, meq = 1) # resolvendo o problema de otimização quadrática
(weights <- sol$solution) # pesos do portfólio GMVP
# (xix) Determinando o portfólio tangente sem vendas a descoberto
rf <- 0 # retorno do ativo livre de risco
(tg.s.short <- tangency.portfolio(er = mu.vec, cov.mat = sigma.mat, risk.free = rf, shorts = FALSE))
